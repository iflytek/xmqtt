// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package device

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message of xmqtt to authServer:Login
type LoginRequest struct {
	ClientAddr           string   `protobuf:"bytes,1,opt,name=clientAddr,proto3" json:"clientAddr,omitempty"`
	ClientID             string   `protobuf:"bytes,2,opt,name=clientID,proto3" json:"clientID,omitempty"`
	ProductKey           string   `protobuf:"bytes,3,opt,name=productKey,proto3" json:"productKey,omitempty"`
	DeviceName           string   `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Password             string   `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	NodeID               string   `protobuf:"bytes,6,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRequest.Unmarshal(m, b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return xxx_messageInfo_LoginRequest.Size(m)
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *LoginRequest) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *LoginRequest) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *LoginRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *LoginRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

// The response message of xmqtt to authServer:Login
type LoginReply struct {
	Status               int64    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Val                  string   `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginReply) Reset()         { *m = LoginReply{} }
func (m *LoginReply) String() string { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()    {}
func (*LoginReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *LoginReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginReply.Unmarshal(m, b)
}
func (m *LoginReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginReply.Marshal(b, m, deterministic)
}
func (m *LoginReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReply.Merge(m, src)
}
func (m *LoginReply) XXX_Size() int {
	return xxx_messageInfo_LoginReply.Size(m)
}
func (m *LoginReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReply.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReply proto.InternalMessageInfo

func (m *LoginReply) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *LoginReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *LoginReply) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

// The request message of xmqtt to authServer:Logout
type LogoutRequest struct {
	ClientAddr           string   `protobuf:"bytes,1,opt,name=clientAddr,proto3" json:"clientAddr,omitempty"`
	ProductKey           string   `protobuf:"bytes,2,opt,name=productKey,proto3" json:"productKey,omitempty"`
	DeviceName           string   `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	LastestVal           string   `protobuf:"bytes,4,opt,name=lastestVal,proto3" json:"lastestVal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogoutRequest) Reset()         { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()    {}
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}

func (m *LogoutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogoutRequest.Unmarshal(m, b)
}
func (m *LogoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogoutRequest.Marshal(b, m, deterministic)
}
func (m *LogoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutRequest.Merge(m, src)
}
func (m *LogoutRequest) XXX_Size() int {
	return xxx_messageInfo_LogoutRequest.Size(m)
}
func (m *LogoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutRequest proto.InternalMessageInfo

func (m *LogoutRequest) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *LogoutRequest) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *LogoutRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *LogoutRequest) GetLastestVal() string {
	if m != nil {
		return m.LastestVal
	}
	return ""
}

// The response message of xmqtt to authServer:Logout
type LogoutReply struct {
	Status               int64    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Val                  string   `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogoutReply) Reset()         { *m = LogoutReply{} }
func (m *LogoutReply) String() string { return proto.CompactTextString(m) }
func (*LogoutReply) ProtoMessage()    {}
func (*LogoutReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3}
}

func (m *LogoutReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogoutReply.Unmarshal(m, b)
}
func (m *LogoutReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogoutReply.Marshal(b, m, deterministic)
}
func (m *LogoutReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutReply.Merge(m, src)
}
func (m *LogoutReply) XXX_Size() int {
	return xxx_messageInfo_LogoutReply.Size(m)
}
func (m *LogoutReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutReply.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutReply proto.InternalMessageInfo

func (m *LogoutReply) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *LogoutReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *LogoutReply) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

// The request message of PushServer to xmqtt:Push
type PushRequest struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=productKey,proto3" json:"productKey,omitempty"`
	DeviceName           string   `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Topic                string   `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload              []byte   `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushRequest) Reset()         { *m = PushRequest{} }
func (m *PushRequest) String() string { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()    {}
func (*PushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{4}
}

func (m *PushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushRequest.Unmarshal(m, b)
}
func (m *PushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushRequest.Marshal(b, m, deterministic)
}
func (m *PushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRequest.Merge(m, src)
}
func (m *PushRequest) XXX_Size() int {
	return xxx_messageInfo_PushRequest.Size(m)
}
func (m *PushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRequest proto.InternalMessageInfo

func (m *PushRequest) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *PushRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *PushRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PushRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// The response message of PushServer to xmqtt:Push
type PushReply struct {
	Status               int64    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushReply) Reset()         { *m = PushReply{} }
func (m *PushReply) String() string { return proto.CompactTextString(m) }
func (*PushReply) ProtoMessage()    {}
func (*PushReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{5}
}

func (m *PushReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushReply.Unmarshal(m, b)
}
func (m *PushReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushReply.Marshal(b, m, deterministic)
}
func (m *PushReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushReply.Merge(m, src)
}
func (m *PushReply) XXX_Size() int {
	return xxx_messageInfo_PushReply.Size(m)
}
func (m *PushReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushReply.DiscardUnknown(m)
}

var xxx_messageInfo_PushReply proto.InternalMessageInfo

func (m *PushReply) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PushReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

// 断开连接请求
type DisconnectRequest struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=productKey,proto3" json:"productKey,omitempty"`
	DeviceName           string   `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Reason               string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisconnectRequest) Reset()         { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()    {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{6}
}

func (m *DisconnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisconnectRequest.Unmarshal(m, b)
}
func (m *DisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisconnectRequest.Marshal(b, m, deterministic)
}
func (m *DisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectRequest.Merge(m, src)
}
func (m *DisconnectRequest) XXX_Size() int {
	return xxx_messageInfo_DisconnectRequest.Size(m)
}
func (m *DisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectRequest proto.InternalMessageInfo

func (m *DisconnectRequest) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *DisconnectRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *DisconnectRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// 断开连接响应
type DisconnectReply struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisconnectReply) Reset()         { *m = DisconnectReply{} }
func (m *DisconnectReply) String() string { return proto.CompactTextString(m) }
func (*DisconnectReply) ProtoMessage()    {}
func (*DisconnectReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{7}
}

func (m *DisconnectReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisconnectReply.Unmarshal(m, b)
}
func (m *DisconnectReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisconnectReply.Marshal(b, m, deterministic)
}
func (m *DisconnectReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectReply.Merge(m, src)
}
func (m *DisconnectReply) XXX_Size() int {
	return xxx_messageInfo_DisconnectReply.Size(m)
}
func (m *DisconnectReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectReply.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectReply proto.InternalMessageInfo

func (m *DisconnectReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DisconnectReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The request message of xmqtt to uploadServer:Upload
type UploadRequest struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=productKey,proto3" json:"productKey,omitempty"`
	DeviceName           string   `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Topic                string   `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Timestamp            int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Payload              []byte   `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRequest) Reset()         { *m = UploadRequest{} }
func (m *UploadRequest) String() string { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()    {}
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{8}
}

func (m *UploadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRequest.Unmarshal(m, b)
}
func (m *UploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRequest.Marshal(b, m, deterministic)
}
func (m *UploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRequest.Merge(m, src)
}
func (m *UploadRequest) XXX_Size() int {
	return xxx_messageInfo_UploadRequest.Size(m)
}
func (m *UploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRequest proto.InternalMessageInfo

func (m *UploadRequest) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *UploadRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *UploadRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *UploadRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UploadRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// The response message of xmqtt to uploadServer:Upload
type UploadReply struct {
	Status               int64    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadReply) Reset()         { *m = UploadReply{} }
func (m *UploadReply) String() string { return proto.CompactTextString(m) }
func (*UploadReply) ProtoMessage()    {}
func (*UploadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{9}
}

func (m *UploadReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadReply.Unmarshal(m, b)
}
func (m *UploadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadReply.Marshal(b, m, deterministic)
}
func (m *UploadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadReply.Merge(m, src)
}
func (m *UploadReply) XXX_Size() int {
	return xxx_messageInfo_UploadReply.Size(m)
}
func (m *UploadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadReply.DiscardUnknown(m)
}

var xxx_messageInfo_UploadReply proto.InternalMessageInfo

func (m *UploadReply) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UploadReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

// The request message of xmqtt to uploadServer:PostBack
type PostRequest struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=productKey,proto3" json:"productKey,omitempty"`
	DeviceName           string   `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Topic                string   `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Timestamp            int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ret                  int64    `protobuf:"varint,5,opt,name=ret,proto3" json:"ret,omitempty"`
	Payload              []byte   `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostRequest) Reset()         { *m = PostRequest{} }
func (m *PostRequest) String() string { return proto.CompactTextString(m) }
func (*PostRequest) ProtoMessage()    {}
func (*PostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{10}
}

func (m *PostRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostRequest.Unmarshal(m, b)
}
func (m *PostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostRequest.Marshal(b, m, deterministic)
}
func (m *PostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostRequest.Merge(m, src)
}
func (m *PostRequest) XXX_Size() int {
	return xxx_messageInfo_PostRequest.Size(m)
}
func (m *PostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostRequest proto.InternalMessageInfo

func (m *PostRequest) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *PostRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *PostRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PostRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PostRequest) GetRet() int64 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *PostRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// The response message of xmqtt to uploadServer:PostBack
type PostReply struct {
	Status               int64    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Err                  string   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostReply) Reset()         { *m = PostReply{} }
func (m *PostReply) String() string { return proto.CompactTextString(m) }
func (*PostReply) ProtoMessage()    {}
func (*PostReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{11}
}

func (m *PostReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostReply.Unmarshal(m, b)
}
func (m *PostReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostReply.Marshal(b, m, deterministic)
}
func (m *PostReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostReply.Merge(m, src)
}
func (m *PostReply) XXX_Size() int {
	return xxx_messageInfo_PostReply.Size(m)
}
func (m *PostReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PostReply.DiscardUnknown(m)
}

var xxx_messageInfo_PostReply proto.InternalMessageInfo

func (m *PostReply) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PostReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "device.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "device.LoginReply")
	proto.RegisterType((*LogoutRequest)(nil), "device.LogoutRequest")
	proto.RegisterType((*LogoutReply)(nil), "device.LogoutReply")
	proto.RegisterType((*PushRequest)(nil), "device.PushRequest")
	proto.RegisterType((*PushReply)(nil), "device.PushReply")
	proto.RegisterType((*DisconnectRequest)(nil), "device.DisconnectRequest")
	proto.RegisterType((*DisconnectReply)(nil), "device.DisconnectReply")
	proto.RegisterType((*UploadRequest)(nil), "device.UploadRequest")
	proto.RegisterType((*UploadReply)(nil), "device.UploadReply")
	proto.RegisterType((*PostRequest)(nil), "device.PostRequest")
	proto.RegisterType((*PostReply)(nil), "device.PostReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/device.Auth/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/device.Auth/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Auth/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "device.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Auth_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// DeviceClient is the client API for Device service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectReply, error)
}

type deviceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceClient(cc *grpc.ClientConn) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := c.cc.Invoke(ctx, "/device.Device/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectReply, error) {
	out := new(DisconnectReply)
	err := c.cc.Invoke(ctx, "/device.Device/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServer is the server API for Device service.
type DeviceServer interface {
	Push(context.Context, *PushRequest) (*PushReply, error)
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectReply, error)
}

func RegisterDeviceServer(s *grpc.Server, srv DeviceServer) {
	s.RegisterService(&_Device_serviceDesc, srv)
}

func _Device_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Device_serviceDesc = grpc.ServiceDesc{
	ServiceName: "device.Device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Device_Push_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Device_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// EventClient is the client API for Event service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventClient interface {
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadReply, error)
	PostBack(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostReply, error)
}

type eventClient struct {
	cc *grpc.ClientConn
}

func NewEventClient(cc *grpc.ClientConn) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadReply, error) {
	out := new(UploadReply)
	err := c.cc.Invoke(ctx, "/device.Event/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) PostBack(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostReply, error) {
	out := new(PostReply)
	err := c.cc.Invoke(ctx, "/device.Event/PostBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServer is the server API for Event service.
type EventServer interface {
	Upload(context.Context, *UploadRequest) (*UploadReply, error)
	PostBack(context.Context, *PostRequest) (*PostReply, error)
}

func RegisterEventServer(s *grpc.Server, srv EventServer) {
	s.RegisterService(&_Event_serviceDesc, srv)
}

func _Event_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Event/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_PostBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).PostBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Event/PostBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).PostBack(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Event_serviceDesc = grpc.ServiceDesc{
	ServiceName: "device.Event",
	HandlerType: (*EventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _Event_Upload_Handler,
		},
		{
			MethodName: "PostBack",
			Handler:    _Event_PostBack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0x8d, 0xe3, 0xd8, 0x5f, 0x33, 0x69, 0xf4, 0xb5, 0x4b, 0x29, 0xc6, 0x42, 0x15, 0xda, 0x2b,
	0xae, 0x22, 0xd4, 0xf2, 0x73, 0x89, 0x5a, 0x05, 0x89, 0x88, 0x0a, 0x55, 0x96, 0xe0, 0x7e, 0xb1,
	0x47, 0xa9, 0x55, 0xc7, 0x6b, 0xbc, 0xeb, 0xa0, 0x5c, 0xc0, 0x2b, 0xf0, 0x04, 0x3c, 0x02, 0xaf,
	0xc0, 0xb3, 0xa1, 0xfd, 0x71, 0xbd, 0x69, 0x90, 0x4a, 0x04, 0x88, 0xbb, 0x3d, 0x67, 0xbc, 0x3b,
	0xe7, 0xcc, 0xce, 0xac, 0x61, 0xbc, 0x40, 0x21, 0xd8, 0x1c, 0x27, 0x55, 0xcd, 0x25, 0x27, 0x61,
	0x86, 0xcb, 0x3c, 0x45, 0xfa, 0xdd, 0x83, 0xdd, 0x73, 0x3e, 0xcf, 0xcb, 0x04, 0x3f, 0x34, 0x28,
	0x24, 0x39, 0x02, 0x48, 0x8b, 0x1c, 0x4b, 0x79, 0x9a, 0x65, 0x75, 0xe4, 0x3d, 0xf4, 0x1e, 0x0d,
	0x13, 0x87, 0x21, 0x31, 0xec, 0x18, 0x34, 0x9b, 0x46, 0x7d, 0x1d, 0xbd, 0xc6, 0x6a, 0x6f, 0x55,
	0xf3, 0xac, 0x49, 0xe5, 0x6b, 0x5c, 0x45, 0xbe, 0xd9, 0xdb, 0x31, 0x2a, 0x6e, 0xd2, 0xbe, 0x61,
	0x0b, 0x8c, 0x06, 0x26, 0xde, 0x31, 0xea, 0xec, 0x8a, 0x09, 0xf1, 0x91, 0xd7, 0x59, 0x14, 0x98,
	0xb3, 0x5b, 0x4c, 0x0e, 0x21, 0x2c, 0x79, 0x86, 0xb3, 0x69, 0x14, 0xea, 0x88, 0x45, 0xf4, 0x15,
	0x80, 0xd5, 0x5f, 0x15, 0x2b, 0xf5, 0x95, 0x90, 0x4c, 0x36, 0x42, 0x2b, 0xf7, 0x13, 0x8b, 0xc8,
	0x1e, 0xf8, 0x58, 0xd7, 0x56, 0xb0, 0x5a, 0x2a, 0x66, 0xc9, 0x0a, 0x2b, 0x52, 0x2d, 0xe9, 0x17,
	0x0f, 0xc6, 0xe7, 0x7c, 0xce, 0x1b, 0xf9, 0xab, 0xb5, 0x58, 0xf7, 0xdb, 0xbf, 0xc5, 0xaf, 0xbf,
	0xe1, 0xf7, 0x08, 0xa0, 0x60, 0x42, 0xa2, 0x90, 0xef, 0x58, 0xd1, 0xd6, 0xa3, 0x63, 0xe8, 0x0c,
	0x46, 0xad, 0xa0, 0xdf, 0x35, 0xf7, 0x09, 0x46, 0x17, 0x8d, 0xb8, 0x74, 0x9c, 0x39, 0xca, 0xbd,
	0x5b, 0x94, 0xf7, 0x37, 0x94, 0x1f, 0x40, 0x20, 0x79, 0x95, 0xa7, 0x36, 0x85, 0x01, 0x24, 0x82,
	0xff, 0x2a, 0xb6, 0x2a, 0x38, 0xcb, 0xb4, 0x99, 0xdd, 0xa4, 0x85, 0xf4, 0x29, 0x0c, 0x4d, 0xfa,
	0xad, 0x7c, 0xd0, 0x2b, 0xd8, 0x9f, 0xe6, 0x22, 0xe5, 0x65, 0x89, 0xa9, 0xfc, 0x53, 0xda, 0x0f,
	0x21, 0xac, 0x91, 0x09, 0x5e, 0x5a, 0xf1, 0x16, 0xd1, 0x17, 0xf0, 0xbf, 0x9b, 0x4c, 0x29, 0x25,
	0x30, 0x48, 0x79, 0x86, 0x3a, 0x49, 0x90, 0xe8, 0xb5, 0x32, 0x69, 0x47, 0xc9, 0x9e, 0xdd, 0x42,
	0xfa, 0xd5, 0x83, 0xf1, 0xdb, 0x4a, 0xf9, 0xfd, 0xbb, 0x65, 0x7e, 0x00, 0x43, 0x99, 0x2f, 0x50,
	0x48, 0xb6, 0xa8, 0x74, 0xa1, 0xfd, 0xa4, 0x23, 0xdc, 0x4b, 0x08, 0xd6, 0x2f, 0xe1, 0x39, 0x8c,
	0x5a, 0x79, 0xdb, 0x5d, 0xc3, 0x37, 0x0f, 0x46, 0x17, 0x5c, 0xc8, 0x7f, 0x69, 0x6b, 0x0f, 0xfc,
	0x1a, 0xa5, 0xb6, 0xe4, 0x27, 0x6a, 0xe9, 0x1a, 0x0d, 0x37, 0xbb, 0x4d, 0xcb, 0xdd, 0xca, 0xe6,
	0xb1, 0x80, 0xc1, 0x69, 0x23, 0x2f, 0xc9, 0x09, 0x04, 0xfa, 0x49, 0x21, 0x07, 0x13, 0x23, 0x7a,
	0xe2, 0xbe, 0x90, 0x31, 0xb9, 0xc1, 0x56, 0xc5, 0x8a, 0xf6, 0xc8, 0x33, 0x08, 0xcd, 0xac, 0x92,
	0xbb, 0x4e, 0xbc, 0x7b, 0x4c, 0xe2, 0x3b, 0x37, 0x69, 0xbd, 0xef, 0xf8, 0x33, 0x84, 0x53, 0xcd,
	0x93, 0xc7, 0x30, 0x50, 0x33, 0x42, 0xae, 0x3f, 0x74, 0x06, 0x36, 0xde, 0x5f, 0x27, 0x4d, 0xce,
	0x33, 0x80, 0xae, 0x63, 0xc9, 0xfd, 0xf6, 0x93, 0x8d, 0x91, 0x89, 0xef, 0xfd, 0x2c, 0x64, 0xf2,
	0x37, 0x10, 0xbc, 0x5c, 0x62, 0x29, 0x95, 0x01, 0xd3, 0x1d, 0x9d, 0x81, 0xb5, 0x66, 0xee, 0x0c,
	0x38, 0x4d, 0x44, 0x7b, 0xe4, 0x09, 0xec, 0xa8, 0x62, 0x9f, 0xb1, 0xf4, 0xca, 0x91, 0xde, 0x75,
	0x8b, 0x23, 0xbd, 0xbd, 0x13, 0xda, 0x7b, 0x1f, 0xea, 0xdf, 0xd0, 0xc9, 0x8f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x08, 0x1e, 0xbd, 0x32, 0x97, 0x06, 0x00, 0x00,
}
