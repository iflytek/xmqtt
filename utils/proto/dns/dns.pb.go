// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dns.proto

package httpdns

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetSipResolverRequest struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Operator             string   `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Nettype              string   `protobuf:"bytes,3,opt,name=nettype,proto3" json:"nettype,omitempty"`
	Cver                 string   `protobuf:"bytes,4,opt,name=cver,proto3" json:"cver,omitempty"`
	Svc                  string   `protobuf:"bytes,5,opt,name=svc,proto3" json:"svc,omitempty"`
	Clientip             string   `protobuf:"bytes,6,opt,name=clientip,proto3" json:"clientip,omitempty"`
	Pkey                 string   `protobuf:"bytes,7,opt,name=pkey,proto3" json:"pkey,omitempty"`
	Dname                string   `protobuf:"bytes,8,opt,name=dname,proto3" json:"dname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSipResolverRequest) Reset()         { *m = GetSipResolverRequest{} }
func (m *GetSipResolverRequest) String() string { return proto.CompactTextString(m) }
func (*GetSipResolverRequest) ProtoMessage()    {}
func (*GetSipResolverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_638ff8d8aaf3d8ae, []int{0}
}

func (m *GetSipResolverRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSipResolverRequest.Unmarshal(m, b)
}
func (m *GetSipResolverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSipResolverRequest.Marshal(b, m, deterministic)
}
func (m *GetSipResolverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSipResolverRequest.Merge(m, src)
}
func (m *GetSipResolverRequest) XXX_Size() int {
	return xxx_messageInfo_GetSipResolverRequest.Size(m)
}
func (m *GetSipResolverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSipResolverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSipResolverRequest proto.InternalMessageInfo

func (m *GetSipResolverRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetSipResolverRequest) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *GetSipResolverRequest) GetNettype() string {
	if m != nil {
		return m.Nettype
	}
	return ""
}

func (m *GetSipResolverRequest) GetCver() string {
	if m != nil {
		return m.Cver
	}
	return ""
}

func (m *GetSipResolverRequest) GetSvc() string {
	if m != nil {
		return m.Svc
	}
	return ""
}

func (m *GetSipResolverRequest) GetClientip() string {
	if m != nil {
		return m.Clientip
	}
	return ""
}

func (m *GetSipResolverRequest) GetPkey() string {
	if m != nil {
		return m.Pkey
	}
	return ""
}

func (m *GetSipResolverRequest) GetDname() string {
	if m != nil {
		return m.Dname
	}
	return ""
}

type GetSipResolverReply struct {
	Err                  int64    `protobuf:"varint,1,opt,name=err,proto3" json:"err,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Result               []byte   `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSipResolverReply) Reset()         { *m = GetSipResolverReply{} }
func (m *GetSipResolverReply) String() string { return proto.CompactTextString(m) }
func (*GetSipResolverReply) ProtoMessage()    {}
func (*GetSipResolverReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_638ff8d8aaf3d8ae, []int{1}
}

func (m *GetSipResolverReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSipResolverReply.Unmarshal(m, b)
}
func (m *GetSipResolverReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSipResolverReply.Marshal(b, m, deterministic)
}
func (m *GetSipResolverReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSipResolverReply.Merge(m, src)
}
func (m *GetSipResolverReply) XXX_Size() int {
	return xxx_messageInfo_GetSipResolverReply.Size(m)
}
func (m *GetSipResolverReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSipResolverReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSipResolverReply proto.InternalMessageInfo

func (m *GetSipResolverReply) GetErr() int64 {
	if m != nil {
		return m.Err
	}
	return 0
}

func (m *GetSipResolverReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetSipResolverReply) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*GetSipResolverRequest)(nil), "httpdns.GetSipResolverRequest")
	proto.RegisterType((*GetSipResolverReply)(nil), "httpdns.GetSipResolverReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HttpDNSClient is the client API for HttpDNS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HttpDNSClient interface {
	GetSipResolver(ctx context.Context, in *GetSipResolverRequest, opts ...grpc.CallOption) (*GetSipResolverReply, error)
}

type httpDNSClient struct {
	cc *grpc.ClientConn
}

func NewHttpDNSClient(cc *grpc.ClientConn) HttpDNSClient {
	return &httpDNSClient{cc}
}

func (c *httpDNSClient) GetSipResolver(ctx context.Context, in *GetSipResolverRequest, opts ...grpc.CallOption) (*GetSipResolverReply, error) {
	out := new(GetSipResolverReply)
	err := c.cc.Invoke(ctx, "/httpdns.HttpDNS/GetSipResolver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpDNSServer is the server API for HttpDNS service.
type HttpDNSServer interface {
	GetSipResolver(context.Context, *GetSipResolverRequest) (*GetSipResolverReply, error)
}

func RegisterHttpDNSServer(s *grpc.Server, srv HttpDNSServer) {
	s.RegisterService(&_HttpDNS_serviceDesc, srv)
}

func _HttpDNS_GetSipResolver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSipResolverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpDNSServer).GetSipResolver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpdns.HttpDNS/GetSipResolver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpDNSServer).GetSipResolver(ctx, req.(*GetSipResolverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HttpDNS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "httpdns.HttpDNS",
	HandlerType: (*HttpDNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSipResolver",
			Handler:    _HttpDNS_GetSipResolver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns.proto",
}

func init() { proto.RegisterFile("dns.proto", fileDescriptor_638ff8d8aaf3d8ae) }

var fileDescriptor_638ff8d8aaf3d8ae = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xad, 0xdd, 0x6d, 0x77, 0x07, 0x11, 0x19, 0xff, 0x10, 0x16, 0x11, 0xe9, 0xc9, 0x53,
	0x0f, 0xfa, 0x15, 0x04, 0x3d, 0x89, 0x74, 0x0f, 0x1e, 0x3c, 0xd5, 0x76, 0xc0, 0x62, 0x4d, 0xc6,
	0x64, 0x5a, 0xe8, 0xe7, 0xf4, 0x0b, 0x49, 0xd2, 0xac, 0xa0, 0xe8, 0xed, 0xfd, 0x5e, 0x98, 0x37,
	0xbc, 0x09, 0xac, 0x5b, 0xed, 0x4a, 0xb6, 0x46, 0x0c, 0xe6, 0xaf, 0x22, 0xdc, 0x6a, 0x57, 0x7c,
	0x26, 0x70, 0x7a, 0x47, 0xb2, 0xed, 0xb8, 0x22, 0x67, 0xfa, 0x91, 0x6c, 0x45, 0x1f, 0x03, 0x39,
	0x41, 0x05, 0xf9, 0x48, 0xd6, 0x75, 0x46, 0xab, 0xe4, 0x32, 0xb9, 0x5a, 0x57, 0x3b, 0xc4, 0x0d,
	0xac, 0x0c, 0x93, 0xad, 0xc5, 0x58, 0xb5, 0x1f, 0x9e, 0xbe, 0xd9, 0x4f, 0x69, 0x12, 0x99, 0x98,
	0x54, 0x3a, 0x4f, 0x45, 0x44, 0x84, 0x45, 0x33, 0x92, 0x55, 0x8b, 0x60, 0x07, 0x8d, 0x47, 0x90,
	0xba, 0xb1, 0x51, 0xcb, 0x60, 0x79, 0xe9, 0xb3, 0x9b, 0xbe, 0x23, 0x2d, 0x1d, 0xab, 0x6c, 0xce,
	0xde, 0xb1, 0x4f, 0xe0, 0x37, 0x9a, 0x54, 0x3e, 0x27, 0x78, 0x8d, 0x27, 0xb0, 0x6c, 0x75, 0xfd,
	0x4e, 0x6a, 0x15, 0xcc, 0x19, 0x8a, 0x27, 0x38, 0xfe, 0x5d, 0x8a, 0xfb, 0xc9, 0xaf, 0x23, 0x6b,
	0x43, 0x9d, 0xb4, 0xf2, 0x12, 0xcf, 0x20, 0x73, 0x52, 0xcb, 0xe0, 0x62, 0x91, 0x48, 0xde, 0xb7,
	0xe4, 0x86, 0x5e, 0x42, 0x8b, 0x83, 0x2a, 0xd2, 0xf5, 0x33, 0xe4, 0xf7, 0x22, 0x7c, 0xfb, 0xb0,
	0xc5, 0x47, 0x38, 0xfc, 0xb9, 0x03, 0x2f, 0xca, 0x78, 0xd5, 0xf2, 0xcf, 0x8b, 0x6e, 0xce, 0xff,
	0x7d, 0xe7, 0x7e, 0x2a, 0xf6, 0x5e, 0xb2, 0xf0, 0x37, 0x37, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x9e, 0x65, 0xfd, 0x42, 0xa8, 0x01, 0x00, 0x00,
}
