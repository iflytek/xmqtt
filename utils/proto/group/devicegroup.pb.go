// Code generated by protoc-gen-go. DO NOT EDIT.
// source: devicegroup.proto

package group

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetDeviceGroupDeviceListRequest struct {
	DeviceGroupIdList    []string `protobuf:"bytes,1,rep,name=deviceGroupIdList,proto3" json:"deviceGroupIdList,omitempty"`
	ProductKey           string   `protobuf:"bytes,2,opt,name=productKey,proto3" json:"productKey,omitempty"`
	IsCheckChildGroup    bool     `protobuf:"varint,3,opt,name=isCheckChildGroup,proto3" json:"isCheckChildGroup,omitempty"`
	CurrentPage          int64    `protobuf:"varint,4,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	PageSize             int64    `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceGroupDeviceListRequest) Reset()         { *m = GetDeviceGroupDeviceListRequest{} }
func (m *GetDeviceGroupDeviceListRequest) String() string { return proto.CompactTextString(m) }
func (*GetDeviceGroupDeviceListRequest) ProtoMessage()    {}
func (*GetDeviceGroupDeviceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_169fd74cb54bd7aa, []int{0}
}

func (m *GetDeviceGroupDeviceListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceGroupDeviceListRequest.Unmarshal(m, b)
}
func (m *GetDeviceGroupDeviceListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceGroupDeviceListRequest.Marshal(b, m, deterministic)
}
func (m *GetDeviceGroupDeviceListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceGroupDeviceListRequest.Merge(m, src)
}
func (m *GetDeviceGroupDeviceListRequest) XXX_Size() int {
	return xxx_messageInfo_GetDeviceGroupDeviceListRequest.Size(m)
}
func (m *GetDeviceGroupDeviceListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceGroupDeviceListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceGroupDeviceListRequest proto.InternalMessageInfo

func (m *GetDeviceGroupDeviceListRequest) GetDeviceGroupIdList() []string {
	if m != nil {
		return m.DeviceGroupIdList
	}
	return nil
}

func (m *GetDeviceGroupDeviceListRequest) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *GetDeviceGroupDeviceListRequest) GetIsCheckChildGroup() bool {
	if m != nil {
		return m.IsCheckChildGroup
	}
	return false
}

func (m *GetDeviceGroupDeviceListRequest) GetCurrentPage() int64 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *GetDeviceGroupDeviceListRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type GetDeviceGroupDeviceListReply struct {
	Code                     int64                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message                  string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ProductKeyDeviceNameList []*ProductKeyDeviceName `protobuf:"bytes,3,rep,name=productKeyDeviceNameList,proto3" json:"productKeyDeviceNameList,omitempty"`
	CurrentPage              int64                   `protobuf:"varint,4,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	PageSize                 int64                   `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                `json:"-"`
	XXX_unrecognized         []byte                  `json:"-"`
	XXX_sizecache            int32                   `json:"-"`
}

func (m *GetDeviceGroupDeviceListReply) Reset()         { *m = GetDeviceGroupDeviceListReply{} }
func (m *GetDeviceGroupDeviceListReply) String() string { return proto.CompactTextString(m) }
func (*GetDeviceGroupDeviceListReply) ProtoMessage()    {}
func (*GetDeviceGroupDeviceListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_169fd74cb54bd7aa, []int{1}
}

func (m *GetDeviceGroupDeviceListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceGroupDeviceListReply.Unmarshal(m, b)
}
func (m *GetDeviceGroupDeviceListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceGroupDeviceListReply.Marshal(b, m, deterministic)
}
func (m *GetDeviceGroupDeviceListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceGroupDeviceListReply.Merge(m, src)
}
func (m *GetDeviceGroupDeviceListReply) XXX_Size() int {
	return xxx_messageInfo_GetDeviceGroupDeviceListReply.Size(m)
}
func (m *GetDeviceGroupDeviceListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceGroupDeviceListReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceGroupDeviceListReply proto.InternalMessageInfo

func (m *GetDeviceGroupDeviceListReply) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetDeviceGroupDeviceListReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetDeviceGroupDeviceListReply) GetProductKeyDeviceNameList() []*ProductKeyDeviceName {
	if m != nil {
		return m.ProductKeyDeviceNameList
	}
	return nil
}

func (m *GetDeviceGroupDeviceListReply) GetCurrentPage() int64 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *GetDeviceGroupDeviceListReply) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ProductKeyDeviceName struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=productKey,proto3" json:"productKey,omitempty"`
	DeviceName           string   `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductKeyDeviceName) Reset()         { *m = ProductKeyDeviceName{} }
func (m *ProductKeyDeviceName) String() string { return proto.CompactTextString(m) }
func (*ProductKeyDeviceName) ProtoMessage()    {}
func (*ProductKeyDeviceName) Descriptor() ([]byte, []int) {
	return fileDescriptor_169fd74cb54bd7aa, []int{2}
}

func (m *ProductKeyDeviceName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductKeyDeviceName.Unmarshal(m, b)
}
func (m *ProductKeyDeviceName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductKeyDeviceName.Marshal(b, m, deterministic)
}
func (m *ProductKeyDeviceName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductKeyDeviceName.Merge(m, src)
}
func (m *ProductKeyDeviceName) XXX_Size() int {
	return xxx_messageInfo_ProductKeyDeviceName.Size(m)
}
func (m *ProductKeyDeviceName) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductKeyDeviceName.DiscardUnknown(m)
}

var xxx_messageInfo_ProductKeyDeviceName proto.InternalMessageInfo

func (m *ProductKeyDeviceName) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *ProductKeyDeviceName) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type CheckDeviceWhetherInDeviceGroupRequest struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=productKey,proto3" json:"productKey,omitempty"`
	DeviceName           string   `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DeviceGroupIdList    []string `protobuf:"bytes,3,rep,name=deviceGroupIdList,proto3" json:"deviceGroupIdList,omitempty"`
	IsCheckChildGroup    bool     `protobuf:"varint,4,opt,name=isCheckChildGroup,proto3" json:"isCheckChildGroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckDeviceWhetherInDeviceGroupRequest) Reset() {
	*m = CheckDeviceWhetherInDeviceGroupRequest{}
}
func (m *CheckDeviceWhetherInDeviceGroupRequest) String() string { return proto.CompactTextString(m) }
func (*CheckDeviceWhetherInDeviceGroupRequest) ProtoMessage()    {}
func (*CheckDeviceWhetherInDeviceGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_169fd74cb54bd7aa, []int{3}
}

func (m *CheckDeviceWhetherInDeviceGroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckDeviceWhetherInDeviceGroupRequest.Unmarshal(m, b)
}
func (m *CheckDeviceWhetherInDeviceGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckDeviceWhetherInDeviceGroupRequest.Marshal(b, m, deterministic)
}
func (m *CheckDeviceWhetherInDeviceGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckDeviceWhetherInDeviceGroupRequest.Merge(m, src)
}
func (m *CheckDeviceWhetherInDeviceGroupRequest) XXX_Size() int {
	return xxx_messageInfo_CheckDeviceWhetherInDeviceGroupRequest.Size(m)
}
func (m *CheckDeviceWhetherInDeviceGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckDeviceWhetherInDeviceGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckDeviceWhetherInDeviceGroupRequest proto.InternalMessageInfo

func (m *CheckDeviceWhetherInDeviceGroupRequest) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *CheckDeviceWhetherInDeviceGroupRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *CheckDeviceWhetherInDeviceGroupRequest) GetDeviceGroupIdList() []string {
	if m != nil {
		return m.DeviceGroupIdList
	}
	return nil
}

func (m *CheckDeviceWhetherInDeviceGroupRequest) GetIsCheckChildGroup() bool {
	if m != nil {
		return m.IsCheckChildGroup
	}
	return false
}

type CheckDeviceWhetherInDeviceGroupReply struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	IsInDeviceGroup      bool     `protobuf:"varint,3,opt,name=isInDeviceGroup,proto3" json:"isInDeviceGroup,omitempty"`
	DeviceGroupIdList    []string `protobuf:"bytes,4,rep,name=deviceGroupIdList,proto3" json:"deviceGroupIdList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckDeviceWhetherInDeviceGroupReply) Reset()         { *m = CheckDeviceWhetherInDeviceGroupReply{} }
func (m *CheckDeviceWhetherInDeviceGroupReply) String() string { return proto.CompactTextString(m) }
func (*CheckDeviceWhetherInDeviceGroupReply) ProtoMessage()    {}
func (*CheckDeviceWhetherInDeviceGroupReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_169fd74cb54bd7aa, []int{4}
}

func (m *CheckDeviceWhetherInDeviceGroupReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckDeviceWhetherInDeviceGroupReply.Unmarshal(m, b)
}
func (m *CheckDeviceWhetherInDeviceGroupReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckDeviceWhetherInDeviceGroupReply.Marshal(b, m, deterministic)
}
func (m *CheckDeviceWhetherInDeviceGroupReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckDeviceWhetherInDeviceGroupReply.Merge(m, src)
}
func (m *CheckDeviceWhetherInDeviceGroupReply) XXX_Size() int {
	return xxx_messageInfo_CheckDeviceWhetherInDeviceGroupReply.Size(m)
}
func (m *CheckDeviceWhetherInDeviceGroupReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckDeviceWhetherInDeviceGroupReply.DiscardUnknown(m)
}

var xxx_messageInfo_CheckDeviceWhetherInDeviceGroupReply proto.InternalMessageInfo

func (m *CheckDeviceWhetherInDeviceGroupReply) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CheckDeviceWhetherInDeviceGroupReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CheckDeviceWhetherInDeviceGroupReply) GetIsInDeviceGroup() bool {
	if m != nil {
		return m.IsInDeviceGroup
	}
	return false
}

func (m *CheckDeviceWhetherInDeviceGroupReply) GetDeviceGroupIdList() []string {
	if m != nil {
		return m.DeviceGroupIdList
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDeviceGroupDeviceListRequest)(nil), "group.GetDeviceGroupDeviceListRequest")
	proto.RegisterType((*GetDeviceGroupDeviceListReply)(nil), "group.GetDeviceGroupDeviceListReply")
	proto.RegisterType((*ProductKeyDeviceName)(nil), "group.ProductKeyDeviceName")
	proto.RegisterType((*CheckDeviceWhetherInDeviceGroupRequest)(nil), "group.CheckDeviceWhetherInDeviceGroupRequest")
	proto.RegisterType((*CheckDeviceWhetherInDeviceGroupReply)(nil), "group.CheckDeviceWhetherInDeviceGroupReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GetDeviceListClient is the client API for GetDeviceList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetDeviceListClient interface {
	GetDeviceGroupDeviceList(ctx context.Context, in *GetDeviceGroupDeviceListRequest, opts ...grpc.CallOption) (*GetDeviceGroupDeviceListReply, error)
}

type getDeviceListClient struct {
	cc *grpc.ClientConn
}

func NewGetDeviceListClient(cc *grpc.ClientConn) GetDeviceListClient {
	return &getDeviceListClient{cc}
}

func (c *getDeviceListClient) GetDeviceGroupDeviceList(ctx context.Context, in *GetDeviceGroupDeviceListRequest, opts ...grpc.CallOption) (*GetDeviceGroupDeviceListReply, error) {
	out := new(GetDeviceGroupDeviceListReply)
	err := c.cc.Invoke(ctx, "/group.GetDeviceList/GetDeviceGroupDeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetDeviceListServer is the server API for GetDeviceList service.
type GetDeviceListServer interface {
	GetDeviceGroupDeviceList(context.Context, *GetDeviceGroupDeviceListRequest) (*GetDeviceGroupDeviceListReply, error)
}

func RegisterGetDeviceListServer(s *grpc.Server, srv GetDeviceListServer) {
	s.RegisterService(&_GetDeviceList_serviceDesc, srv)
}

func _GetDeviceList_GetDeviceGroupDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceGroupDeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetDeviceListServer).GetDeviceGroupDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.GetDeviceList/GetDeviceGroupDeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetDeviceListServer).GetDeviceGroupDeviceList(ctx, req.(*GetDeviceGroupDeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetDeviceList_serviceDesc = grpc.ServiceDesc{
	ServiceName: "group.GetDeviceList",
	HandlerType: (*GetDeviceListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceGroupDeviceList",
			Handler:    _GetDeviceList_GetDeviceGroupDeviceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "devicegroup.proto",
}

// CheckDeviceInDeviceGroupClient is the client API for CheckDeviceInDeviceGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckDeviceInDeviceGroupClient interface {
	CheckDeviceWhetherInDeviceGroup(ctx context.Context, in *CheckDeviceWhetherInDeviceGroupRequest, opts ...grpc.CallOption) (*CheckDeviceWhetherInDeviceGroupReply, error)
}

type checkDeviceInDeviceGroupClient struct {
	cc *grpc.ClientConn
}

func NewCheckDeviceInDeviceGroupClient(cc *grpc.ClientConn) CheckDeviceInDeviceGroupClient {
	return &checkDeviceInDeviceGroupClient{cc}
}

func (c *checkDeviceInDeviceGroupClient) CheckDeviceWhetherInDeviceGroup(ctx context.Context, in *CheckDeviceWhetherInDeviceGroupRequest, opts ...grpc.CallOption) (*CheckDeviceWhetherInDeviceGroupReply, error) {
	out := new(CheckDeviceWhetherInDeviceGroupReply)
	err := c.cc.Invoke(ctx, "/group.CheckDeviceInDeviceGroup/CheckDeviceWhetherInDeviceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckDeviceInDeviceGroupServer is the server API for CheckDeviceInDeviceGroup service.
type CheckDeviceInDeviceGroupServer interface {
	CheckDeviceWhetherInDeviceGroup(context.Context, *CheckDeviceWhetherInDeviceGroupRequest) (*CheckDeviceWhetherInDeviceGroupReply, error)
}

func RegisterCheckDeviceInDeviceGroupServer(s *grpc.Server, srv CheckDeviceInDeviceGroupServer) {
	s.RegisterService(&_CheckDeviceInDeviceGroup_serviceDesc, srv)
}

func _CheckDeviceInDeviceGroup_CheckDeviceWhetherInDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDeviceWhetherInDeviceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckDeviceInDeviceGroupServer).CheckDeviceWhetherInDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/group.CheckDeviceInDeviceGroup/CheckDeviceWhetherInDeviceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckDeviceInDeviceGroupServer).CheckDeviceWhetherInDeviceGroup(ctx, req.(*CheckDeviceWhetherInDeviceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckDeviceInDeviceGroup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "group.CheckDeviceInDeviceGroup",
	HandlerType: (*CheckDeviceInDeviceGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckDeviceWhetherInDeviceGroup",
			Handler:    _CheckDeviceInDeviceGroup_CheckDeviceWhetherInDeviceGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "devicegroup.proto",
}

func init() { proto.RegisterFile("devicegroup.proto", fileDescriptor_169fd74cb54bd7aa) }

var fileDescriptor_169fd74cb54bd7aa = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4f, 0x4e, 0xfa, 0x40,
	0x14, 0xc7, 0x7f, 0xf3, 0x6b, 0x51, 0x78, 0xc4, 0x18, 0x27, 0x2e, 0x26, 0x18, 0xa1, 0x69, 0x08,
	0x69, 0xa2, 0xb2, 0xc0, 0x23, 0x60, 0x42, 0x88, 0xc6, 0x90, 0x9a, 0xc8, 0x1a, 0xdb, 0x17, 0x5a,
	0x05, 0x5a, 0xdb, 0xa9, 0x09, 0xba, 0xf0, 0x20, 0x5e, 0xc1, 0x63, 0x78, 0x0b, 0xb7, 0x1e, 0xc4,
	0x74, 0x4a, 0xa1, 0xd0, 0x36, 0xc5, 0xb0, 0x9b, 0x79, 0x7f, 0xe7, 0xfb, 0xde, 0xa7, 0x85, 0x23,
	0x13, 0x5f, 0x6c, 0x03, 0xc7, 0x9e, 0x13, 0xb8, 0x6d, 0xd7, 0x73, 0xb8, 0x43, 0x4b, 0xe2, 0xa2,
	0x7e, 0x13, 0x68, 0xf4, 0x90, 0x5f, 0x09, 0x7f, 0x2f, 0x34, 0x45, 0xc7, 0x1b, 0xdb, 0xe7, 0x3a,
	0x3e, 0x07, 0xe8, 0x73, 0x7a, 0x1e, 0xe7, 0x0b, 0x7f, 0xdf, 0x0c, 0x7d, 0x8c, 0x28, 0x92, 0x56,
	0xd1, 0xd3, 0x0e, 0x5a, 0x07, 0x70, 0x3d, 0xc7, 0x0c, 0x0c, 0x7e, 0x8d, 0x73, 0xf6, 0x5f, 0x21,
	0x5a, 0x45, 0x4f, 0x58, 0xc2, 0x6a, 0xb6, 0xdf, 0xb5, 0xd0, 0x78, 0xea, 0x5a, 0xf6, 0xc4, 0x14,
	0xa9, 0x4c, 0x52, 0x88, 0x56, 0xd6, 0xd3, 0x0e, 0xaa, 0x40, 0xd5, 0x08, 0x3c, 0x0f, 0x67, 0x7c,
	0x30, 0x1a, 0x23, 0x93, 0x15, 0xa2, 0x49, 0x7a, 0xd2, 0x44, 0x6b, 0x50, 0x76, 0x47, 0x63, 0xbc,
	0xb3, 0x5f, 0x91, 0x95, 0x84, 0x7b, 0x79, 0x57, 0x7f, 0x08, 0x9c, 0xe6, 0xab, 0x73, 0x27, 0x73,
	0x4a, 0x41, 0x36, 0x1c, 0x13, 0x19, 0x11, 0x99, 0xe2, 0x4c, 0x19, 0xec, 0x4f, 0xd1, 0xf7, 0xc3,
	0x7e, 0xd1, 0xf3, 0xe3, 0x2b, 0x1d, 0x02, 0x5b, 0x29, 0x89, 0x4a, 0xdd, 0x8e, 0xa6, 0xa2, 0x1c,
	0x93, 0x14, 0x49, 0xab, 0x76, 0x4e, 0xda, 0xd1, 0x90, 0x07, 0x19, 0x61, 0x7a, 0x6e, 0xf2, 0x8e,
	0x32, 0xef, 0xe1, 0x38, 0xab, 0xdf, 0xc6, 0x2a, 0x48, 0x6a, 0x15, 0x75, 0x00, 0x73, 0x19, 0x1d,
	0xaf, 0x6a, 0x65, 0x51, 0xbf, 0x08, 0xb4, 0xc4, 0x42, 0xa2, 0x9a, 0x43, 0x0b, 0xb9, 0x85, 0x5e,
	0x7f, 0x96, 0x98, 0x67, 0xcc, 0xc8, 0x8e, 0xad, 0xb2, 0x19, 0x93, 0xf2, 0x18, 0xcb, 0x64, 0x48,
	0xce, 0x61, 0x48, 0xfd, 0x24, 0xd0, 0x2c, 0x94, 0xf1, 0x77, 0x18, 0x34, 0x38, 0xb4, 0xfd, 0xb5,
	0x2a, 0x0b, 0x8c, 0x37, 0xcd, 0xd9, 0xe2, 0xe4, 0x1c, 0x71, 0x9d, 0x37, 0x38, 0x58, 0x32, 0x2b,
	0xd4, 0x3e, 0x02, 0xcb, 0x83, 0x98, 0xb6, 0x16, 0xbc, 0x15, 0x7c, 0xc3, 0xb5, 0x66, 0x61, 0x9c,
	0x3b, 0x99, 0xab, 0xff, 0x3a, 0x1f, 0x04, 0x58, 0x62, 0x56, 0xeb, 0x3a, 0xde, 0xa1, 0x51, 0x30,
	0x47, 0x7a, 0xb1, 0xe8, 0xb3, 0x1d, 0x36, 0xb5, 0xb3, 0x6d, 0xc3, 0xc5, 0xeb, 0x1e, 0xf6, 0xc4,
	0xbf, 0xeb, 0xf2, 0x37, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x04, 0xce, 0x48, 0xd0, 0x04, 0x00, 0x00,
}
